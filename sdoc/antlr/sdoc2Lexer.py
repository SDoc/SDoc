# Generated from sdoc/antlr/sdoc2Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,200,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
        2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
        2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,
        7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,1,0,4,0,52,8,0,11,0,
        12,0,53,1,0,1,0,3,0,58,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,5,4,93,8,4,10,4,12,4,96,9,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,4,7,109,8,7,11,7,12,7,110,
        1,7,1,7,1,8,1,8,5,8,117,8,8,10,8,12,8,120,9,8,1,8,1,8,1,8,1,9,1,
        9,1,9,4,9,128,8,9,11,9,12,9,129,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,5,15,150,
        8,15,10,15,12,15,153,9,15,1,16,1,16,3,16,157,8,16,1,17,1,17,5,17,
        161,8,17,10,17,12,17,164,9,17,1,17,1,17,1,17,5,17,169,8,17,10,17,
        12,17,172,9,17,1,17,3,17,175,8,17,1,18,4,18,178,8,18,11,18,12,18,
        179,1,19,4,19,183,8,19,11,19,12,19,184,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,21,1,21,1,21,4,21,197,8,21,11,21,12,21,198,0,0,22,6,
        1,8,2,10,3,12,4,14,5,16,6,18,7,20,8,22,9,24,10,26,11,28,12,30,13,
        32,14,34,15,36,16,38,17,40,0,42,0,44,18,46,19,48,20,6,0,1,2,3,4,
        5,10,1,0,92,92,2,0,95,95,97,122,3,0,48,57,95,95,97,122,3,0,9,10,
        13,13,32,32,2,0,123,123,125,125,2,0,65,90,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,34,34,1,0,39,39,1,0,48,57,208,0,6,1,0,0,0,0,8,1,
        0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,1,16,1,0,0,0,1,18,1,
        0,0,0,1,20,1,0,0,0,2,22,1,0,0,0,2,24,1,0,0,0,3,26,1,0,0,0,3,28,1,
        0,0,0,4,30,1,0,0,0,4,32,1,0,0,0,4,34,1,0,0,0,4,36,1,0,0,0,4,38,1,
        0,0,0,4,44,1,0,0,0,5,46,1,0,0,0,5,48,1,0,0,0,6,57,1,0,0,0,8,59,1,
        0,0,0,10,68,1,0,0,0,12,75,1,0,0,0,14,89,1,0,0,0,16,99,1,0,0,0,18,
        103,1,0,0,0,20,108,1,0,0,0,22,114,1,0,0,0,24,127,1,0,0,0,26,131,
        1,0,0,0,28,135,1,0,0,0,30,139,1,0,0,0,32,143,1,0,0,0,34,145,1,0,
        0,0,36,147,1,0,0,0,38,156,1,0,0,0,40,174,1,0,0,0,42,177,1,0,0,0,
        44,182,1,0,0,0,46,188,1,0,0,0,48,196,1,0,0,0,50,52,8,0,0,0,51,50,
        1,0,0,0,52,53,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,58,1,0,0,0,
        55,56,5,92,0,0,56,58,5,92,0,0,57,51,1,0,0,0,57,55,1,0,0,0,58,7,1,
        0,0,0,59,60,5,92,0,0,60,61,5,98,0,0,61,62,5,101,0,0,62,63,5,103,
        0,0,63,64,5,105,0,0,64,65,5,110,0,0,65,66,1,0,0,0,66,67,6,1,0,0,
        67,9,1,0,0,0,68,69,5,92,0,0,69,70,5,101,0,0,70,71,5,110,0,0,71,72,
        5,100,0,0,72,73,1,0,0,0,73,74,6,2,0,0,74,11,1,0,0,0,75,76,5,92,0,
        0,76,77,5,112,0,0,77,78,5,111,0,0,78,79,5,115,0,0,79,80,5,105,0,
        0,80,81,5,116,0,0,81,82,5,105,0,0,82,83,5,111,0,0,83,84,5,110,0,
        0,84,85,1,0,0,0,85,86,6,3,1,0,86,87,1,0,0,0,87,88,6,3,2,0,88,13,
        1,0,0,0,89,90,5,92,0,0,90,94,7,1,0,0,91,93,7,2,0,0,92,91,1,0,0,0,
        93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,94,1,
        0,0,0,97,98,6,4,2,0,98,15,1,0,0,0,99,100,5,91,0,0,100,101,1,0,0,
        0,101,102,6,5,3,0,102,17,1,0,0,0,103,104,5,123,0,0,104,105,1,0,0,
        0,105,106,6,6,4,0,106,19,1,0,0,0,107,109,7,3,0,0,108,107,1,0,0,0,
        109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,
        112,113,6,7,5,0,113,21,1,0,0,0,114,118,5,125,0,0,115,117,7,3,0,0,
        116,115,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,
        119,121,1,0,0,0,120,118,1,0,0,0,121,122,6,8,6,0,122,123,6,8,6,0,
        123,23,1,0,0,0,124,128,8,4,0,0,125,126,5,92,0,0,126,128,9,0,0,0,
        127,124,1,0,0,0,127,125,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,
        129,130,1,0,0,0,130,25,1,0,0,0,131,132,5,91,0,0,132,133,1,0,0,0,
        133,134,6,10,3,0,134,27,1,0,0,0,135,136,5,123,0,0,136,137,1,0,0,
        0,137,138,6,11,7,0,138,29,1,0,0,0,139,140,5,93,0,0,140,141,1,0,0,
        0,141,142,6,12,6,0,142,31,1,0,0,0,143,144,5,61,0,0,144,33,1,0,0,
        0,145,146,5,32,0,0,146,35,1,0,0,0,147,151,7,5,0,0,148,150,7,6,0,
        0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,
        0,152,37,1,0,0,0,153,151,1,0,0,0,154,157,3,40,17,0,155,157,3,42,
        18,0,156,154,1,0,0,0,156,155,1,0,0,0,157,39,1,0,0,0,158,162,5,34,
        0,0,159,161,8,7,0,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,
        0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,175,5,34,
        0,0,166,170,5,39,0,0,167,169,8,8,0,0,168,167,1,0,0,0,169,172,1,0,
        0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,1,0,0,0,172,170,1,0,
        0,0,173,175,5,39,0,0,174,158,1,0,0,0,174,166,1,0,0,0,175,41,1,0,
        0,0,176,178,7,9,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,
        0,0,179,180,1,0,0,0,180,43,1,0,0,0,181,183,7,3,0,0,182,181,1,0,0,
        0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,
        0,186,187,6,19,5,0,187,45,1,0,0,0,188,189,5,125,0,0,189,190,1,0,
        0,0,190,191,6,20,6,0,191,192,6,20,6,0,192,47,1,0,0,0,193,197,8,4,
        0,0,194,195,5,92,0,0,195,197,9,0,0,0,196,193,1,0,0,0,196,194,1,0,
        0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,49,1,0,0,
        0,22,0,1,2,3,4,5,53,57,94,110,118,127,129,151,156,162,170,174,179,
        184,196,198,8,5,1,0,1,3,0,5,3,0,5,4,0,5,2,0,6,0,0,4,0,0,5,5,0
    ]

class sdoc2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MODE_BLOCK = 1
    MODE_BLOCK_NAME = 2
    MODE_ARGS = 3
    MODE_OPT_ARGS = 4
    MODE_MAIN_ARG = 5

    TEXT = 1
    BEGIN = 2
    END = 3
    POSITION = 4
    SDOC2_COMMAND = 5
    BLOCK_LEFT_BRACKET = 6
    BLOCK_LEFT_BRACE = 7
    BLOCK_WS = 8
    BLOCK_RIGHT_BRACE = 9
    BLOCK_ARG_ARG = 10
    OPT_ARGS_LEFT_BRACKET = 11
    MAIN_ARG_LEFT_BRACE = 12
    OPT_ARGS_RIGHT_BRACKET = 13
    OPT_ARGS_EQUALS = 14
    OPT_ARGS_SEPARATOR = 15
    OPT_ARGS_NAME = 16
    OPT_ARGS_VALUE = 17
    OPT_ARGS_WS = 18
    MAIN_ARG_RIGHT_BRACE = 19
    MAIN_ARG = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "MODE_BLOCK", "MODE_BLOCK_NAME", "MODE_ARGS", 
                  "MODE_OPT_ARGS", "MODE_MAIN_ARG" ]

    literalNames = [ "<INVALID>",
            "'\\begin'", "'\\end'", "']'", "'='", "' '", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "TEXT", "BEGIN", "END", "POSITION", "SDOC2_COMMAND", "BLOCK_LEFT_BRACKET", 
            "BLOCK_LEFT_BRACE", "BLOCK_WS", "BLOCK_RIGHT_BRACE", "BLOCK_ARG_ARG", 
            "OPT_ARGS_LEFT_BRACKET", "MAIN_ARG_LEFT_BRACE", "OPT_ARGS_RIGHT_BRACKET", 
            "OPT_ARGS_EQUALS", "OPT_ARGS_SEPARATOR", "OPT_ARGS_NAME", "OPT_ARGS_VALUE", 
            "OPT_ARGS_WS", "MAIN_ARG_RIGHT_BRACE", "MAIN_ARG" ]

    ruleNames = [ "TEXT", "BEGIN", "END", "POSITION", "SDOC2_COMMAND", "BLOCK_LEFT_BRACKET", 
                  "BLOCK_LEFT_BRACE", "BLOCK_WS", "BLOCK_RIGHT_BRACE", "BLOCK_ARG_ARG", 
                  "OPT_ARGS_LEFT_BRACKET", "MAIN_ARG_LEFT_BRACE", "OPT_ARGS_RIGHT_BRACKET", 
                  "OPT_ARGS_EQUALS", "OPT_ARGS_SEPARATOR", "OPT_ARGS_NAME", 
                  "OPT_ARGS_VALUE", "OPT_ARGS_STRING", "OPT_ARGS_INT", "OPT_ARGS_WS", 
                  "MAIN_ARG_RIGHT_BRACE", "MAIN_ARG" ]

    grammarFileName = "sdoc2Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[3] = self.POSITION_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def POSITION_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            pass
     


